<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Bijectiv</title>
		<description>How the bijectiv object-to-object .NET mapping library gets built.</description>		
		<link>http://themouthofacow.github.io/bijectiv</link>
		<atom:link href="http://themouthofacow.github.io/bijectiv/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>On Productivity</title>
				<description>&lt;p&gt;I&amp;#39;m constantly finding new and innovative ways to pass the time between birth and death. &lt;/p&gt;

&lt;p&gt;Three days ago I was trying to get this &lt;a href=&quot;http://richard-moon.co.uk/ascii/moon.html&quot;&gt;spinning 3D ascii world&lt;/a&gt; I hacked out a couple of years ago to overlay onto the blog. It turns out something has happened in Chrome over the past two years that means it now crashes after about 30 seconds with an &amp;#39;Aw Snap&amp;#39;; the snap would be more impressive, but all I did was write the ascii filter and mess with the specular map - alas I don&amp;#39;t remember where I got the original spining world code, but I do remember having a lot of fun and boring everyone at home to death with it.&lt;/p&gt;

&lt;p&gt;Two days ago I discovered &lt;a href=&quot;https://en.wikipedia.org/wiki/Microdata_%28HTML%29&quot;&gt;Microdata&lt;/a&gt; and retrofitted some into the about box. Working in enterprise software, not uber cool web, you find out a lot about nuts and bolts software engineering, but less about the uber cool or the bleeding edge. Microdata seems like SEO on steroids and a concept / technology that the SEO consutants must be totally majorly excited about (maybe this is some kind of reprieve from Google after they killed all of their juicy link farms). Microdata has a nested structure (i.e. one &lt;a href=&quot;http://schema.org/Thing&quot;&gt;Thing&lt;/a&gt; is contained in another) and must be overlayed as metadata onto regular text that is human visible: however, writing prose and writing structured data are not necessarily compatible, so there will be an impetus to structure oddly for the robots, rather than the humans.&lt;/p&gt;

&lt;p&gt;Yesterday I wrote some of bijectiv (少し), but of course I took the opportunity to get my hands dirty with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh549175.aspx&quot;&gt;Microsoft Fakes&lt;/a&gt; instead of doing any real work and was kind-of-quite-impressed. I, like many .NET developers have been using &lt;a href=&quot;https://github.com/Moq/moq4&quot;&gt;Moq&lt;/a&gt; for their mocking needs for quite some time; we know that we can&amp;#39;t mock static classes or methods or private or protected methods etceteras... but we know how to work around these limitations and a lot of people feel that the abstractions that are encouraged by mocking frameworks are a good thing. &lt;/p&gt;

&lt;p&gt;Microsoft Fakes offers developers the holy grail of &lt;strong&gt;Mocking &lt;code&gt;Date.Now&lt;/code&gt;&lt;/strong&gt;: seriously most of us would have sold our Mothers long ago for that (I&amp;#39;m joking). But it does feel like black magic. The only downside is that it is far too clever for its own good and either R# or Visual Studio just refuses to believe that the &lt;code&gt;Shims&lt;/code&gt; are what they say they are without a suspicious cast. Either way; that&amp;#39;s now the mocking framework I&amp;#39;m going to use for the project.&lt;/p&gt;
</description>
				<pubDate>Tue, 01 Apr 2014 00:00:00 +0100</pubDate>
				<link>http://themouthofacow.github.io/bijectiv/meta/2014/04/01/on-productivity.html</link>
				<guid isPermaLink="true">http://themouthofacow.github.io/bijectiv/meta/2014/04/01/on-productivity.html</guid>
			</item>
		
			<item>
				<title>Push and go; easy hosting in gh-pages</title>
				<description>&lt;h3&gt;Preamble&lt;/h3&gt;

&lt;p&gt;Four days in and I&amp;#39;m really excited by the &lt;a href=&quot;http://pages.github.com/&quot;&gt;github pages&lt;/a&gt; / &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt; static site generator combination. I&amp;#39;m not so sure about the all-in-one solution of uploading the unparsed jekyll site because, being a programmer, I have a natural aversion to committing something I&amp;#39;m not happy with and it requires a commit to see how new content gets rendered. However, working locally with jekyll running in the background is by far the best way to develop a small site that I&amp;#39;ve come across. Databases rule for transactional integrity, but it is starting to become clear that the price one pays for that integrity is really quite high: for tiny data volumes go flat files and a parser, for huge data volumes go hadoop, databases occupy the middle ground.&lt;/p&gt;

&lt;p&gt;I think that next time I work on a web project I may well use jekyll to prototype the layout and javascript because it gives such immediate feedback. The template syntax is fairly similar to ASP.NET, so once you&amp;#39;ve got the basic shell working with jekyll then translating that back to ASP is going to be straightforward (this theme originally belonged to the beginnings of an MVC Razor blog).&lt;/p&gt;

&lt;h3&gt;Developing with github pages and jekyll&lt;/h3&gt;

&lt;p&gt;Something I realised very quickly was that when hosting in &lt;a href=&quot;http://pages.github.com/&quot;&gt;github pages&lt;/a&gt; and using &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt; locally to build the site it is critical that the &lt;em&gt;proto site&lt;/em&gt; (i.e. the thing that jekyll actually builds into your site) gets version controlled. Why? well if you mess this up then you will have no way of going back from the built site to its definition. To this end I now have two branches in the github project that are dedicated to the blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gh-pages&lt;/code&gt; and;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gh-pages-proto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The branch &lt;code&gt;gh-pages&lt;/code&gt; is the special branch that github provides for hosting sites and &lt;code&gt;gh-pages-proto&lt;/code&gt; is the branch that contains the code that jekyll builds into &lt;code&gt;gh-pages&lt;/code&gt;. The suffix &lt;em&gt;proto&lt;/em&gt; means first; giving &lt;code&gt;gh-pages-proto&lt;/code&gt; the meaning of the entity that brought about &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To work with this setup, at the end of each session I need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build the site.&lt;/li&gt;
&lt;li&gt;Merge the newly built site over the old one.&lt;/li&gt;
&lt;li&gt;Stage, commit and push those changes to &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove junk I don&amp;#39;t want version controlled from &lt;code&gt;gh-pages-proto&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Stage, commit and push the code changes to &lt;code&gt;gh-pages-proto&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This obviously sounds like a total pain to do by hand, so that is why it needs to be automated. The following bash script does this (&lt;code&gt;bash&lt;/code&gt; is so much better than Windows &lt;code&gt;batch&lt;/code&gt;). To run it you will need to &lt;a href=&quot;http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github&quot;&gt;cache your credentials with git&lt;/a&gt;: Giri Alwar&amp;#39;s answer works best for me, but my credentials are secure by virtue of their geography, on a public machine this might not work for you.&lt;/p&gt;

&lt;h3&gt;Push to &lt;code&gt;gh-pages&lt;/code&gt; and &lt;code&gt;gh-pages-proto&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Remember where we are so we can return there at the end of the script&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; ./

&lt;span class=&quot;c&quot;&gt;# 1. Define the directories that contain the two branches.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The directory that contains the gh-pages branch.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ghpages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/themouthofacow/Documents/bijectiv/gh-pages/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The directory that contains the branch containing the code that gets built by jekyll.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ghpagesproto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/themouthofacow/Documents/bijectiv/gh-pages-proto/&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2. Build the site using jekyll.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ghpagesproto&lt;/span&gt;
jekyll build

&lt;span class=&quot;c&quot;&gt;# 3. Delete everything from gh-pages directory except for the git repository and the ignore file.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ghpages&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;shopt&lt;/span&gt; -s extglob
rm !&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.git&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;.gitignore&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; -r

&lt;span class=&quot;c&quot;&gt;# 4. Copy the freshly built site into the gh-pages directory.&lt;/span&gt;
cp &lt;span class=&quot;nv&quot;&gt;$ghpagesproto&lt;/span&gt;/_site/* ./ -r
rm &lt;span class=&quot;nv&quot;&gt;$ghpagesproto&lt;/span&gt;/_site -r

&lt;span class=&quot;c&quot;&gt;# 5. Add everything - this is the clever bit; because git stores hashes of all of the files in the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    local repository adding everything in fact: removes files that no longer exist; adds the new &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    ones and; updates the ones that have changed. Anything that hasn&amp;#39;t changed is untouched, so you&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    get a perfect incremental commit!&lt;/span&gt;
git add -A .
git commit -a -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;blog updated --tmoac&amp;#39;&lt;/span&gt;
git push

&lt;span class=&quot;c&quot;&gt;# 6. Commit the code that gets built by jekyll.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ghpagesproto&lt;/span&gt;
git add -A .
git commit -a -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;site updated --tmoac&amp;#39;&lt;/span&gt;
git push

&lt;span class=&quot;c&quot;&gt;# Return to the original location.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
				<pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
				<link>http://themouthofacow.github.io/bijectiv/meta/2014/03/27/push-and-go.html</link>
				<guid isPermaLink="true">http://themouthofacow.github.io/bijectiv/meta/2014/03/27/push-and-go.html</guid>
			</item>
		
			<item>
				<title>Why do object-to-object mapping?</title>
				<description>&lt;p&gt;A system of any kind of scale will almost certainly have multiple parts (database, web-server, client) where each part performs its own distinct function (persists state, provide services, allows user interaction) and; it is generally desirable if the parts can develop independently of one another, whilst still maintaining a strong relationship between the core data that &lt;em&gt;defines&lt;/em&gt; the system. In programmer parlance the aim is to achieve something close to message level &lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;coupling&lt;/a&gt; between the distinct parts. The term &lt;em&gt;parts&lt;/em&gt; is deliberately woolly; feel free to interpret it as you wish.&lt;/p&gt;

&lt;p&gt;Good design suggests that corresponding to each individual part should be at least one model; again the term &lt;em&gt;model&lt;/em&gt; is allowed to be woolly, but it could be thought of as the data structures that comprise the part. So in the above example there might be three distinct models in the system: the &lt;strong&gt;data model&lt;/strong&gt;, the &lt;strong&gt;service model&lt;/strong&gt; and the &lt;strong&gt;view model&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To make this more concrete suppose that the system has the concept of a customer; then there might be three models describing that customer, one in the data model, one in the service model and one in the view model.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CustomerDataModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerServiceModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerViewModel&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe the &lt;code&gt;CustomerDataModel&lt;/code&gt; exposes a complex object graph consisting of the customer&amp;#39;s order history, all previous addresses, contact preferences and the like; in this case it is likely that a restricted view of the customer that only contains a subset of this data is useful. This suggests that corresponding to the &lt;code&gt;CustomerDataModel&lt;/code&gt; might be multiple service and view models.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CustomerDataModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerServiceModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerHeaderServiceModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerViewModel&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;CustomerHeaderViewModel&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because there are distinct models in each part of the system it is easy (easier) to develop each part separately without needing to worry about changes in one part affecting functionality in some completely different part: all of the methods in the &lt;em&gt;data&lt;/em&gt; part should operate on &lt;em&gt;data&lt;/em&gt; objects and all of the methods in the &lt;em&gt;view&lt;/em&gt; part should operate on &lt;em&gt;view&lt;/em&gt; objects, so there is no obvious way that adding a new view only feature in the view part that requires the view model to change slightly (i.e. redesigning a user control) can affect, or be affected by any of the existing functionality in the data part. Sounds awesome right?&lt;/p&gt;

&lt;p&gt;But there is a snag...&lt;/p&gt;

&lt;p&gt;No coupling means, by definition, no communication and communication is vital for the system to have value. Somehow we need to recouple these parts so that they can talk to each other, but as loosely as possible: the &lt;code&gt;CustomerDataModel&lt;/code&gt; needs to to become a &lt;code&gt;CustomerServiceModel&lt;/code&gt; so that it can function in the service part, the &lt;code&gt;CustomerServiceModel&lt;/code&gt; needs to become a &lt;code&gt;CustomerViewModel&lt;/code&gt; so that it can function in the view part and so on and vice verse.&lt;/p&gt;

&lt;p&gt;One approach is to have a method that corresponds to each mapping operation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerDataModelToCustomerServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerServiceModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ... explicit mapping code &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerDataModelToCustomerHeaderServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerServiceHeaderModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ... explicit mapping code &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerServiceModelToCustomerDataModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CustomerServiceModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ... explicit mapping code &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But even with this simple example there are at least 8 mapping operations that make good sense, not even considering any nested maps required, and already we are staring directly at a maintenance nightmare. The cunning plan to decouple our system is now looking less than inviting.&lt;/p&gt;

&lt;p&gt;It is here that the object-to-object mapper comes to the rescue. A mapper can replace boilerplate mapping methods with simple configuration expressed in easy to read fluent syntax, similarly to the way the &lt;a href=&quot;https://entityframework.codeplex.com/&quot;&gt;Entity Framework&lt;/a&gt; defines maps between CLR types and database tables, or &lt;a href=&quot;https://github.com/autofac/Autofac&quot;&gt;Autofac&lt;/a&gt; describes the steps required to construct a type. &lt;/p&gt;

&lt;p&gt;The hope is that it can be configured in a module that looks something like the following (rather optimistic) snippit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerServiceHeaderModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomerServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerDataModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then later, where it is necessary to transform between models, the mapper is called as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomerServiceModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The transformation rules live in their own well structured, testable module, that is itself decoupled from the other parts of the system and these define a &lt;code&gt;transformer&lt;/code&gt; that can be used anywhere to perform the transformation operations. The mapping module is the coupling point: no part knows about any other, but the mapping module knows how to transform between the various models and so provides the glue that makes system-wide communication possible.&lt;/p&gt;

&lt;p&gt;Its a very powerful concept, but unlike &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; the lack of any library as good as &lt;a href=&quot;https://github.com/autofac/Autofac&quot;&gt;Autofac&lt;/a&gt; for me makes it hard to adopt; specifically because it really gets embedded in the overall architecture like an IoC container.&lt;/p&gt;
</description>
				<pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
				<link>http://themouthofacow.github.io/bijectiv/planning/2014/03/26/why-do-object-to-object-mapping.html</link>
				<guid isPermaLink="true">http://themouthofacow.github.io/bijectiv/planning/2014/03/26/why-do-object-to-object-mapping.html</guid>
			</item>
		
			<item>
				<title>bijective.blog.Beautify</title>
				<description>&lt;p&gt;For dyed in the wool visual studio fanboys like myself the blog theme will be clear - it is an homage to the king of IDEs itself (the 2012 edition where form was emphasised so heavily over function in release 1 that it was no longer possible to develop WPF applications visually due to the black artboard: in fact later on in the development cycle when applications had grown into hundred view monsters that bootstrapped from autofac through caliburn the designer just stopped working anyway, at which point everyone switched it off and coded blind like zatoichi - feeling their way through nested markup extensions, in edaphic genuflection looking for some rhyme or reason).&lt;/p&gt;

&lt;p&gt;Anyway, the point of this is that the blog now has a style, which is both highly derivative, not at all uber and definitely not fit for purpose. But just check out the cool guideline at 120 characters - only the real pros have one of those in their IDE. (Actually it renders at something like 140 characters, but 120 is where you want to be).&lt;/p&gt;

&lt;p&gt;And for fun the code gets rendered like in visual studio on the black background where it is really difficult to read what&amp;#39;s going on, but not as hard as it is in the solution explorer where you generally feel like an eskimo with a really bad case of snow blindness. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamlr.Core.Xaml&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq.Expressions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;JetBrains.Annotations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;/// A factory that produces &amp;lt;see cref=&amp;quot;IFormatter&amp;quot;/&amp;gt; instances.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormatterFactory&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// The individual factories that produce the formatters.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FragmentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Factories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// The formatting context.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// Initializes static members of the &amp;lt;see cref=&amp;quot;FormatterFactory&amp;quot;/&amp;gt; class.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FormatterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;Factories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAssignableFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FragmentFormatterAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ctor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OfType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FragmentFormatterAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// Initializes a new instance of the &amp;lt;see cref=&amp;quot;FormatterFactory&amp;quot;/&amp;gt; class.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;context&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// The context.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FormatterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormattingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;55&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;56&lt;/span&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;57&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;58&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;59&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;60&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;61&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;62&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// Creates a &amp;lt;see cref=&amp;quot;IFormatter&amp;quot;/&amp;gt; that can format a fragment of type &amp;lt;paramref name=&amp;quot;type&amp;quot;/&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;63&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;64&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;type&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;65&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// The fragment type.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;66&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;67&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;returns&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;68&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// A &amp;lt;see cref=&amp;quot;IFormatter&amp;quot;/&amp;gt; that can format a fragment of type &amp;lt;paramref name=&amp;quot;type&amp;quot;/&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;69&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;70&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFormatter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FragmentType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;71&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;72&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Factories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;73&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;74&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See how on line 42 the code blunders well over the guide. Apologies to Linux users; there seems to be a huge discrepancy in size between Windows monospaced and Linux monospaced fonts and so the code looks piddly on Linux.&lt;/p&gt;
</description>
				<pubDate>Tue, 25 Mar 2014 00:00:00 +0000</pubDate>
				<link>http://themouthofacow.github.io/bijectiv/meta/2014/03/25/beautify-the-blog.html</link>
				<guid isPermaLink="true">http://themouthofacow.github.io/bijectiv/meta/2014/03/25/beautify-the-blog.html</guid>
			</item>
		
			<item>
				<title>bijective.Initialize</title>
				<description>&lt;p&gt;Step 1 has been getting the blog set up (maybe that it more like step 7). By day I build .NET enterprise stuff, it is quite funky for .NET enterprise stuff, but not cool. It seems like the internet is for cool kids and cool kids like static sites: that makes sense to me, the thing that has been putting me off blogging is the heavyweight bloat and lack of control you get with workpress (a typeo but I like it, sic.) or its peers. Cool kids also it seems like github - being deeply ingrained in the Microsoft stack I&amp;#39;m more of a CodePlex kind of guy, but hey back when I was cool (read didn&amp;#39;t have children) I used git and linux (gentoo from back in the day that there was a 23 page install guide and that took 4 days to complete and you installed everything from source and maybe it might boot into KDE at the end - emerge world of course never worked), so I&amp;#39;m going to publish this with jekyll from a mint VM. I know, I know, jekyll is way not cool and there is somthing much more uber out there that will rock my world, but the quick start guide was almost that (although it was nice to see that the person who packaged it in mint forgot the ruby dev dependencies - that gave me the good old time linux feel).&lt;/p&gt;
</description>
				<pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
				<link>http://themouthofacow.github.io/bijectiv/meta/2014/03/24/build-the-blog.html</link>
				<guid isPermaLink="true">http://themouthofacow.github.io/bijectiv/meta/2014/03/24/build-the-blog.html</guid>
			</item>
		
	</channel>
</rss>
